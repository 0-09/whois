# encoding: utf-8

# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   /spec/whois/answer/parser/responses/whois.markmonitor.com/status_registered_spec.rb
#
# and regenerate the tests with the following rake task
#
#   $ rake genspec:parsers
#

require 'spec_helper'
require 'whois/answer/parser/whois.markmonitor.com'

describe Whois::Answer::Parser::WhoisMarkmonitorCom, "status_registered.expected" do

  before(:each) do
    file = fixture("responses", "whois.markmonitor.com/status_registered.txt")
    part = Whois::Answer::Part.new(:body => File.read(file))
    @parser = klass.new(part)
  end

  context "#status" do
    it do
      lambda { @parser.status }.should raise_error(Whois::PropertyNotSupported)
    end
  end
  context "#available?" do
    it do
      @parser.available?.should == false
    end
  end
  context "#registered?" do
    it do
      @parser.registered?.should == true
    end
  end
  context "#created_on" do
    it do
      @parser.created_on.should be_a(Time)
    end
    it do
      @parser.created_on.should == Time.parse("1999-03-15")
    end
  end
  context "#updated_on" do
    it do
      @parser.updated_on.should be_a(Time)
    end
    it do
      @parser.updated_on.should == Time.parse("2011-02-11")
    end
  end
  context "#expires_on" do
    it do
      @parser.expires_on.should be_a(Time)
    end
    it do
      @parser.expires_on.should == Time.parse("2012-03-14")
    end
  end
  context "#registrar" do
    it do
      @parser.registrar.should be_a(_registrar)
    end
    it do
      @parser.registrar.id.should           == nil
    end
    it do
      @parser.registrar.name.should         == "Markmonitor.com"
    end
    it do
      @parser.registrar.url.should          == "http://www.markmonitor.com"
    end
  end
  context "#registrant_contact" do
    it do
      @parser.registrant_contact.should be_a(_contact)
    end
    it do
      @parser.registrant_contact.type.should         == Whois::Answer::Contact::TYPE_REGISTRANT
    end
    it do
      @parser.registrant_contact.name.should         == "DNS Admin"
    end
    it do
      @parser.registrant_contact.organization.should == "Google Inc."
    end
    it do
      @parser.registrant_contact.address.should      == "1600 Amphitheatre Parkway"
    end
    it do
      @parser.registrant_contact.city.should         == "Mountain View"
    end
    it do
      @parser.registrant_contact.zip.should          == "94043"
    end
    it do
      @parser.registrant_contact.state.should        == "CA"
    end
    it do
      @parser.registrant_contact.country_code.should == "US"
    end
    it do
      @parser.registrant_contact.phone.should        == "+1.6506234000"
    end
    it do
      @parser.registrant_contact.fax.should          == "+1.6506188571"
    end
    it do
      @parser.registrant_contact.email.should        == "dns-admin@google.com"
    end
  end
  context "#admin_contact" do
    it do
      @parser.admin_contact.should be_a(_contact)
    end
    it do
      @parser.admin_contact.type.should         == Whois::Answer::Contact::TYPE_ADMIN
    end
    it do
      @parser.admin_contact.name.should         == "DNS Admin"
    end
    it do
      @parser.admin_contact.organization.should == "Google Inc."
    end
    it do
      @parser.admin_contact.address.should      == "1600 Amphitheatre Parkway"
    end
    it do
      @parser.admin_contact.city.should         == "Mountain View"
    end
    it do
      @parser.admin_contact.zip.should          == "94043"
    end
    it do
      @parser.admin_contact.state.should        == "CA"
    end
    it do
      @parser.admin_contact.country_code.should == "US"
    end
    it do
      @parser.admin_contact.phone.should        == "+1.6506234000"
    end
    it do
      @parser.admin_contact.fax.should          == "+1.6506188571"
    end
    it do
      @parser.admin_contact.email.should        == "dns-admin@google.com"
    end
  end
  context "#technical_contact" do
    it do
      @parser.technical_contact.should be_a(_contact)
    end
    it do
      @parser.technical_contact.type.should         == Whois::Answer::Contact::TYPE_TECHNICAL
    end
    it do
      @parser.technical_contact.name.should         == "DNS Admin"
    end
    it do
      @parser.technical_contact.organization.should == "Google Inc."
    end
    it do
      @parser.technical_contact.address.should      == "1600 Amphitheatre Parkway"
    end
    it do
      @parser.technical_contact.city.should         == "Mountain View"
    end
    it do
      @parser.technical_contact.zip.should          == "94043"
    end
    it do
      @parser.technical_contact.state.should        == "CA"
    end
    it do
      @parser.technical_contact.country_code.should == "US"
    end
    it do
      @parser.technical_contact.phone.should        == "+1.6506234000"
    end
    it do
      @parser.technical_contact.fax.should          == "+1.6506188571"
    end
    it do
      @parser.technical_contact.email.should        == "dns-admin@google.com"
    end
  end
  context "#nameservers" do
    it do
      @parser.nameservers.should be_a(Array)
    end
    it do
      @parser.nameservers.should have(4).items
    end
    it do
      @parser.nameservers[0].should be_a(_nameserver)
    end
    it do
      @parser.nameservers[0].should == _nameserver.new(:name => "ns2.google.com")
    end
    it do
      @parser.nameservers[1].should be_a(_nameserver)
    end
    it do
      @parser.nameservers[1].should == _nameserver.new(:name => "ns1.google.com")
    end
    it do
      @parser.nameservers[2].should be_a(_nameserver)
    end
    it do
      @parser.nameservers[2].should == _nameserver.new(:name => "ns4.google.com")
    end
    it do
      @parser.nameservers[3].should be_a(_nameserver)
    end
    it do
      @parser.nameservers[3].should == _nameserver.new(:name => "ns3.google.com")
    end
  end
end
