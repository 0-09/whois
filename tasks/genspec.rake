require 'fileutils'

namespace :genspec do

  ROOT_DIR      = File.expand_path("../../", __FILE__)
  TARGET_DIR    = File.join(ROOT_DIR, %w( spec whois answer parser responses ))

  SOURCE_DIR    = File.join(ROOT_DIR, %w( spec fixtures responses ))
  SOURCE_PARTS  = SOURCE_DIR.split("/")


  TPL_DESCRIBE = <<-RUBY.chomp!
# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   %{sfile}
#
# and regenerate the tests with the following rake task
#
#   $ rake genspec:parsers
#

require 'spec_helper'
require 'whois/answer/parser/%{khost}'

describe %{klass}, "%{descr}" do

  before(:each) do
    file = fixture("responses", "%{fixture}")
    part = Whois::Answer::Part.new(:body => File.read(file))
    @parser = klass.new(part)
  end

%{contexts}
end
  RUBY

  TPL_CONTEXT  = <<-RUBY.chomp!
  context "#%{descr}" do
%{examples}
  end
  RUBY

  TPL_EXAMPLE = <<-RUBY.chomp!
    it do
      @parser.%{subject}.%{should} %{match}
    end
  RUBY

  TPL_EXAMPLE_RAISE = <<-RUBY.chomp!
    it do
      lambda { @parser.%{subject} }.%{should} %{match}
    end
  RUBY

  def relativize(path)
    path.gsub(ROOT_DIR, "")
  end


  task :parsers do
    Dir["#{SOURCE_DIR}/**/**.expected"].each do |source_path|

      # Generate the filename and klass name from the test file.
      parts = (source_path.split("/") - SOURCE_PARTS)
      khost = parts.first
      kfile = parts.last
      klass = Whois::Answer::Parser.parser_klass(khost)

      target_path = File.join(TARGET_DIR, *parts).gsub(".expected", "_spec.rb")

      # Extract the tests from the test file
      # and generates a Hash.
      #
      #   {
      #     "domain" => [
      #       ["%s", "should", "== \"google.biz\""]
      #     ],
      #     "created_on" => [
      #       ["%s", "should", "be_a(Time)"],
      #       ["%s", "should", "== Time.parse(\"2002-03-27 00:01:00 GMT\")"]
      #     ]
      #   }
      #
      tests = {}
      match = nil
      lines = File.open(source_path)
      lines.each do |line|
        line.chomp!
        case line
          when ""
            # skip blank lines
          when /^#([^\s]+)/
            tests[match = $1] = []
          when /^\s+(.+?): (.+?) (.+)/
            tests[match] << [$2, $1, $3]
          else
            raise "Invalid Line `#{line}'"
        end
      end

      # Generate the RSpec content and
      #Â write one file for every test.
      contexts = tests.map do |attr, specs|
        examples = specs.map do |method, should, match|
          if match.index("raise_")
            TPL_EXAMPLE_RAISE % { :subject => method % attr, :should => should, :match => match }
          else
            TPL_EXAMPLE % { :subject => method % attr, :should => should, :match => match }
          end
        end.join("\n")
        TPL_CONTEXT % { :descr => attr, :examples => examples }
      end.join("\n")

      describe = <<-RUBY
#{TPL_DESCRIBE % {
  :klass    => klass,
  :khost    => khost,
  :descr    => kfile,
  :sfile    => relativize(target_path),
  :fixture  => parts.join("/").gsub(".expected", ".txt"),
  :contexts => contexts
}}
      RUBY

      print "Generating #{relativize(target_path)}... "
      File.dirname(target_path).tap { |d| File.exists?(d) || FileUtils.mkdir_p(d) }
      File.open(target_path, "w+") { |f| f.write(describe) }
      print "done!\n"
    end

  end

end