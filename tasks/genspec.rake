require 'fileutils'

namespace :genspec do

  ROOT          = File.expand_path("../../", __FILE__)
  ROOT_PARTS    = ROOT.split("/")

  FIXTURE_DIR   = File.join(ROOT, %w( spec fixtures responses ))
  FIXTURE_PARTS = FIXTURE_DIR.split("/")

  RSPEC_DIR     = File.join(ROOT, %w( spec whois answer parser responses ))
  RSPEC_PARTS   = RSPEC_DIR.split("/")


  TPL_DESCRIBE = <<-RUBY.chomp!
# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   %{sfile}
#
# and regenerate the tests with the following rake task
#
#   $ rake genspec:parsers
#

require 'whois/answer/parser/%{khost}'

describe %{klass}, "%{descr}" do

  FILE = "%{fpath}"
  PART = Whois::Answer::Part.new(:body => File.read(FILE))

  _part       = Whois::Answer::Part
  _registrar  = Whois::Answer::Registrar
  _contact    = Whois::Answer::Contact
  _nameserver = Whois::Answer::Nameserver


  before(:each) do
    @parser = klass.new(PART)
  end

%{contexts}
end
  RUBY

  TPL_CONTEXT  = <<-RUBY.chomp!
  context "#%{descr}" do
%{examples}
  end
  RUBY

  TPL_EXAMPLE = <<-RUBY.chomp!
    it do
      @parser.%{subject}.%{should} %{match}
    end
  RUBY

  TPL_EXAMPLE_RAISE = <<-RUBY.chomp!
    it do
      lambda { @parser.%{subject} }.%{should} %{match}
    end
  RUBY

  def relativize(path)
    path.gsub(ROOT, "")
  end


  task :parsers do
    Dir["#{FIXTURE_DIR}/**/**.expected"].each do |file|

      # Generate the filename and klass name from the test file.
      parts = (file.split("/") - FIXTURE_PARTS)
      khost = parts.first
      klass = Whois::Answer::Parser.parser_klass(khost)

      tests_path   = file
      fixture_path = File.join(FIXTURE_DIR, *parts).gsub(".expected", ".txt")
      rspec_path   = File.join(RSPEC_DIR,   *parts).gsub(".expected", "_spec.rb")

      # Extract the tests from the test file
      # and generates a Hash.
      #
      #   {
      #     "domain" => [
      #       ["%s", "should", "== \"google.biz\""]
      #     ],
      #     "created_on" => [
      #       ["%s", "should", "be_a(Time)"],
      #       ["%s", "should", "== Time.parse(\"2002-03-27 00:01:00 GMT\")"]
      #     ]
      #   }
      #
      tests = {}
      match = nil
      lines = File.open(tests_path)
      lines.each do |line|
        line.chomp!
        case line
          when ""
            # skip blank lines
          when /^#([^\s]+)/
            tests[match = $1] = []
          when /^\s+(.+?): (.+?) (.+)/
            tests[match] << [$2, $1, $3]
          else
            raise "Invalid Line `#{line}'"
        end
      end

      # Generate the RSpec content and
      #Â write one file for every test.
      contexts = tests.map do |attr, specs|
        examples = specs.map do |method, should, match|
          if match.index("raise_")
            TPL_EXAMPLE_RAISE % { :subject => method % attr, :should => should, :match => match }
          else
            TPL_EXAMPLE % { :subject => method % attr, :should => should, :match => match }
          end
        end.join("\n")
        TPL_CONTEXT % { :descr => attr, :examples => examples }
      end.join("\n")

      describe = <<-RUBY
#{TPL_DESCRIBE % {
  :klass => klass,
  :khost => khost,
  :descr => parts.last,
  :fpath => fixture_path,
  :sfile => relativize(rspec_path),
  :contexts => contexts
}}
      RUBY

      print "Generating #{relativize(rspec_path)}... "
      File.dirname(rspec_path).tap { |d| File.exists?(d) || FileUtils.mkdir_p(d) }
      File.open(rspec_path, "w+") { |f| f.write(describe) }
      print "done!\n"
    end

  end

end