# encoding: utf-8

# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   /spec/whois/answer/parser/responses/whois.biz/status_registered_spec.rb
#
# and regenerate the tests with the following rake task
#
#   $ rake genspec:parsers
#

require 'spec_helper'
require 'whois/answer/parser/whois.biz'

describe Whois::Answer::Parser::WhoisBiz, "status_registered.expected" do

  before(:each) do
    file = fixture("responses", "whois.biz/status_registered.txt")
    part = Whois::Answer::Part.new(:body => File.read(file))
    @parser = klass.new(part)
  end

  context "#domain" do
    it do
      @parser.domain.should == "google.biz"
    end
  end
  context "#domain_id" do
    it do
      @parser.domain_id.should == "D2835288-BIZ"
    end
  end
  context "#referral_whois" do
    it do
      lambda { @parser.referral_whois }.should raise_error(Whois::PropertyNotSupported)
    end
  end
  context "#referral_url" do
    it do
      lambda { @parser.referral_url }.should raise_error(Whois::PropertyNotSupported)
    end
  end
  context "#status" do
    it do
      @parser.status.should == %w( clientDeleteProhibited clientTransferProhibited clientUpdateProhibited )
    end
  end
  context "#available?" do
    it do
      @parser.available?.should == false
    end
  end
  context "#registered?" do
    it do
      @parser.registered?.should == true
    end
  end
  context "#created_on" do
    it do
      @parser.created_on.should be_a(Time)
    end
    it do
      @parser.created_on.should == Time.parse("2002-03-27 00:01:00 GMT")
    end
  end
  context "#updated_on" do
    it do
      @parser.updated_on.should be_a(Time)
    end
    it do
      @parser.updated_on.should == Time.parse("2009-03-01 12:01:04 GMT")
    end
  end
  context "#expires_on" do
    it do
      @parser.expires_on.should be_a(Time)
    end
    it do
      @parser.expires_on.should == Time.parse("2010-03-26 23:59:59 GMT")
    end
  end
  context "#registrar" do
    it do
      @parser.registrar.should be_a(_registrar)
    end
    it do
      @parser.registrar.id.should           == "292"
    end
    it do
      @parser.registrar.name.should         == "MARKMONITOR, INC."
    end
  end
  context "#registrant_contact" do
    it do
      @parser.registrant_contact.should be_a(_contact)
    end
  end
  context "#admin_contact" do
    it do
      @parser.admin_contact.should be_a(_contact)
    end
  end
  context "#technical_contact" do
    it do
      @parser.technical_contact.should be_a(_contact)
    end
  end
  context "#nameservers" do
    it do
      @parser.nameservers.should be_a(Array)
    end
    it do
      @parser.nameservers.should have(4).items
    end
    it do
      @parser.nameservers[0].should be_a(_nameserver)
    end
    it do
      @parser.nameservers[0].should == _nameserver.new(:name => "ns1.google.com")
    end
    it do
      @parser.nameservers[1].should be_a(_nameserver)
    end
    it do
      @parser.nameservers[1].should == _nameserver.new(:name => "ns2.google.com")
    end
    it do
      @parser.nameservers[2].should be_a(_nameserver)
    end
    it do
      @parser.nameservers[2].should == _nameserver.new(:name => "ns3.google.com")
    end
    it do
      @parser.nameservers[3].should be_a(_nameserver)
    end
    it do
      @parser.nameservers[3].should == _nameserver.new(:name => "ns4.google.com")
    end
  end
end
