# encoding: utf-8

# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   /spec/whois/answer/parser/responses/whois.nic.it/status_registered_spec.rb
#
# and regenerate the tests with the following rake task
#
#   $ rake genspec:parsers
#

require 'spec_helper'
require 'whois/answer/parser/whois.nic.it'

describe Whois::Answer::Parser::WhoisNicIt, "status_registered.expected" do

  before(:each) do
    file = fixture("responses", "whois.nic.it/status_registered.txt")
    part = Whois::Answer::Part.new(:body => File.read(file))
    @parser = klass.new(part)
  end

  context "#disclaimer" do
    it do
      @parser.disclaimer.should == "Please note that the following result could be a subgroup of the data contained in the database. Additional information can be visualized at: http://www.nic.it/cgi-bin/Whois/whois.cgi"
    end
  end
  context "#domain" do
    it do
      @parser.domain.should == "google.it"
    end
  end
  context "#domain_id" do
    it do
      lambda { @parser.domain_id }.should raise_error(Whois::PropertyNotSupported)
    end
  end
  context "#referral_url" do
    it do
      lambda { @parser.referral_url }.should raise_error(Whois::PropertyNotSupported)
    end
  end
  context "#referral_whois" do
    it do
      lambda { @parser.referral_whois }.should raise_error(Whois::PropertyNotSupported)
    end
  end
  context "#status" do
    it do
      @parser.status.should == :registered
    end
  end
  context "#available?" do
    it do
      @parser.available?.should == false
    end
  end
  context "#registered?" do
    it do
      @parser.registered?.should == true
    end
  end
  context "#created_on" do
    it do
      @parser.created_on.should be_a(Time)
    end
    it do
      @parser.created_on.should == Time.parse("1999-12-10 00:00:00")
    end
  end
  context "#updated_on" do
    it do
      @parser.updated_on.should be_a(Time)
    end
    it do
      @parser.updated_on.should == Time.parse("2008-11-27 16:47:22")
    end
  end
  context "#expires_on" do
    it do
      @parser.expires_on.should be_a(Time)
    end
    it do
      @parser.expires_on.should == Time.parse("2009-11-27 00:00:00")
    end
  end
  context "#registrar" do
    it do
      @parser.registrar.should be_a(_registrar)
    end
    it do
      @parser.registrar.id.should           == "REGISTER-MNT"
    end
    it do
      @parser.registrar.name.should         == "REGISTER-MNT"
    end
    it do
      @parser.registrar.organization.should == "Register.it s.p.a."
    end
  end
  context "#registrant_contact" do
    it do
      @parser.registrant_contact.should be_a(_contact)
    end
    it do
      @parser.registrant_contact.type.should         == Whois::Answer::Contact::TYPE_REGISTRANT
    end
    it do
      @parser.registrant_contact.id.should           == "GOOG175-ITNIC"
    end
    it do
      @parser.registrant_contact.name.should         == "Google Ireland Holdings"
    end
    it do
      @parser.registrant_contact.organization.should == nil
    end
    it do
      @parser.registrant_contact.address.should      == "30 Herbert Street"
    end
    it do
      @parser.registrant_contact.city.should         == "Dublin"
    end
    it do
      @parser.registrant_contact.zip.should          == "2"
    end
    it do
      @parser.registrant_contact.state.should        == "IE"
    end
    it do
      @parser.registrant_contact.country_code.should == "IE"
    end
    it do
      @parser.registrant_contact.created_on.should   == Time.parse("2008-11-27 16:47:22")
    end
    it do
      @parser.registrant_contact.updated_on.should   == Time.parse("2008-11-27 16:47:22")
    end
  end
  context "#admin_contact" do
    it do
      @parser.admin_contact.should be_a(_contact)
    end
    it do
      @parser.admin_contact.type.should         == Whois::Answer::Contact::TYPE_ADMIN
    end
    it do
      @parser.admin_contact.id.should           == "TT4277-ITNIC"
    end
    it do
      @parser.admin_contact.name.should         == "Tsao Tu"
    end
    it do
      @parser.admin_contact.organization.should == "Tu Tsao"
    end
    it do
      @parser.admin_contact.address.should      == "30 Herbert Street"
    end
    it do
      @parser.admin_contact.city.should         == "Dublin"
    end
    it do
      @parser.admin_contact.zip.should          == "2"
    end
    it do
      @parser.admin_contact.state.should        == "IE"
    end
    it do
      @parser.admin_contact.country_code.should == "IE"
    end
    it do
      @parser.admin_contact.created_on.should   == Time.parse("2008-11-27 16:47:22")
    end
    it do
      @parser.admin_contact.updated_on.should   == Time.parse("2008-11-27 16:47:22")
    end
  end
  context "#technical_contact" do
    it do
      @parser.technical_contact.should be_a(_contact)
    end
    it do
      @parser.technical_contact.type.should         == Whois::Answer::Contact::TYPE_TECHNICAL
    end
    it do
      @parser.technical_contact.id.should           == "TS7016-ITNIC"
    end
    it do
      @parser.technical_contact.name.should         == "Technical Services"
    end
  end
  context "#nameservers" do
    it do
      @parser.nameservers.should be_a(Array)
    end
    it do
      @parser.nameservers.should have(4).items
    end
    it do
      @parser.nameservers[0].should be_a(_nameserver)
    end
    it do
      @parser.nameservers[0].should == _nameserver.new(:name => "ns1.google.com")
    end
    it do
      @parser.nameservers[1].should be_a(_nameserver)
    end
    it do
      @parser.nameservers[1].should == _nameserver.new(:name => "ns4.google.com")
    end
    it do
      @parser.nameservers[2].should be_a(_nameserver)
    end
    it do
      @parser.nameservers[2].should == _nameserver.new(:name => "ns2.google.com")
    end
    it do
      @parser.nameservers[3].should be_a(_nameserver)
    end
    it do
      @parser.nameservers[3].should == _nameserver.new(:name => "ns3.google.com")
    end
  end
  context "#response_unavailable?" do
    it do
      @parser.response_unavailable?.should == false
    end
  end
end
