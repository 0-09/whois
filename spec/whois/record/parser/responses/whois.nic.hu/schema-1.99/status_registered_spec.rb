# encoding: utf-8

# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   /spec/fixtures/responses/whois.nic.hu/schema-1.99/status_registered.expected
#
# and regenerate the tests with the following rake task
#
#   $ rake spec:generate
#

require 'spec_helper'
require 'whois/record/parser/whois.nic.hu.rb'

describe Whois::Record::Parser::WhoisNicHu, "status_registered.expected" do

  subject do
    file = fixture("responses", "whois.nic.hu/schema-1.99/status_registered.txt")
    part = Whois::Record::Part.new(:body => File.read(file))
    described_class.new(part)
  end

  describe "#disclaimer" do
    it do
      expect(subject.disclaimer).to eq("Rights restricted by copyright. Szerzõi jog fenntartva.\n-Legal usage of this service requires that you agree to\nabide by the rules and conditions set forth at\nhttp://www.domain.hu/domain/English/domainsearch/feltetelek.html\n-A szolgaltatas csak a\nhttp://www.domain.hu/domain/domainsearch/feltetelek.html címen\nelérhetõ feltételek elfogadása és betartása mellett\nhasználható legálisan.")
    end
  end
  describe "#domain" do
    it do
      expect(subject.domain).to eq("google.hu")
    end
  end
  describe "#domain_id" do
    it do
      expect(subject.domain_id).to eq("0000219547")
    end
  end
  describe "#status" do
    it do
      expect(subject.status).to eq(:registered)
    end
  end
  describe "#available?" do
    it do
      expect(subject.available?).to eq(false)
    end
  end
  describe "#registered?" do
    it do
      expect(subject.registered?).to eq(true)
    end
  end
  describe "#created_on" do
    it do
      expect(subject.created_on).to be_a(Time)
      expect(subject.created_on).to eq(Time.parse("2000-03-25 23:20:39"))
    end
  end
  describe "#updated_on" do
    it do
      expect(subject.updated_on).to be_a(Time)
      expect(subject.updated_on).to eq(Time.parse("2009-08-25 10:11:32"))
    end
  end
  describe "#expires_on" do
    it do
      lambda { subject.expires_on }.should raise_error(Whois::AttributeNotSupported)
    end
  end
  describe "#registrar" do
    it do
      expect(subject.registrar).to be_a(Whois::Record::Registrar)
      expect(subject.registrar.id).to eq("1960108002")
      expect(subject.registrar.name).to eq("3C Kft. %CLASS{registrar}")
      expect(subject.registrar.organization).to eq("3C Ltd.")
    end
  end
  describe "#registrant_contacts" do
    it do
      expect(subject.registrant_contacts).to be_a(Array)
      expect(subject.registrant_contacts).to have(1).items
      expect(subject.registrant_contacts[0]).to be_a(Whois::Record::Contact)
      expect(subject.registrant_contacts[0].type).to eq(Whois::Record::Contact::TYPE_REGISTRANT)
      expect(subject.registrant_contacts[0].id).to eq(nil)
      expect(subject.registrant_contacts[0].name).to eq("Google, Inc.")
      expect(subject.registrant_contacts[0].organization).to eq("Google, Inc.")
      expect(subject.registrant_contacts[0].address).to eq("Amphitheatre Pkwy 1600.")
      expect(subject.registrant_contacts[0].city).to eq("Mountain View")
      expect(subject.registrant_contacts[0].zip).to eq("CA-94043")
      expect(subject.registrant_contacts[0].state).to eq(nil)
      expect(subject.registrant_contacts[0].country_code).to eq("US")
      expect(subject.registrant_contacts[0].phone).to eq("+1 650 253 0000")
      expect(subject.registrant_contacts[0].fax).to eq("+1 650 253 0001")
      expect(subject.registrant_contacts[0].email).to eq(nil)
    end
  end
  describe "#admin_contacts" do
    it do
      expect(subject.admin_contacts).to be_a(Array)
      expect(subject.admin_contacts).to have(1).items
      expect(subject.admin_contacts[0]).to be_a(Whois::Record::Contact)
      expect(subject.admin_contacts[0].type).to eq(Whois::Record::Contact::TYPE_ADMINISTRATIVE)
      expect(subject.admin_contacts[0].id).to eq("2000466366")
      expect(subject.admin_contacts[0].name).to eq("3C Kft. %CLASS{registrar}")
      expect(subject.admin_contacts[0].organization).to eq(nil)
      expect(subject.admin_contacts[0].address).to eq("Konkoly Thege út 29-33.")
      expect(subject.admin_contacts[0].city).to eq("Budapest")
      expect(subject.admin_contacts[0].zip).to eq("H-1121")
      expect(subject.admin_contacts[0].state).to eq(nil)
      expect(subject.admin_contacts[0].country_code).to eq("HU")
      expect(subject.admin_contacts[0].phone).to eq("+36 1 275 52 00")
      expect(subject.admin_contacts[0].fax).to eq("+36 1 275 58 87")
    end
  end
  describe "#technical_contacts" do
    it do
      expect(subject.technical_contacts).to be_a(Array)
      expect(subject.technical_contacts).to have(1).items
      expect(subject.technical_contacts[0]).to be_a(Whois::Record::Contact)
      expect(subject.technical_contacts[0].type).to eq(Whois::Record::Contact::TYPE_TECHNICAL)
      expect(subject.technical_contacts[0].id).to eq("2000578125")
      expect(subject.technical_contacts[0].name).to eq("Markmonitor")
      expect(subject.technical_contacts[0].organization).to eq(nil)
      expect(subject.technical_contacts[0].address).to eq("Overland Road 10400, PMB155")
      expect(subject.technical_contacts[0].city).to eq("Boise")
      expect(subject.technical_contacts[0].zip).to eq("ID-83709")
      expect(subject.technical_contacts[0].state).to eq(nil)
      expect(subject.technical_contacts[0].country_code).to eq("US")
      expect(subject.technical_contacts[0].phone).to eq("+ 1 208 389 5798")
      expect(subject.technical_contacts[0].fax).to eq("+ 1 208 389 5771")
      expect(subject.technical_contacts[0].email).to eq("ccops@markmonitor.com")
    end
  end
  describe "#nameservers" do
    it do
      expect(subject.nameservers).to be_a(Array)
      expect(subject.nameservers).to have(4).items
      expect(subject.nameservers[0]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[0].name).to eq("ns1.google.com")
      expect(subject.nameservers[1]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[1].name).to eq("ns4.google.com")
      expect(subject.nameservers[2]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[2].name).to eq("ns3.google.com")
      expect(subject.nameservers[3]).to be_a(Whois::Record::Nameserver)
      expect(subject.nameservers[3].name).to eq("ns2.google.com")
    end
  end
  describe "#zone_contact" do
    it do
      expect(subject.zone_contact).to be_a(Whois::Record::Contact)
      expect(subject.zone_contact.type).to eq(nil)
      expect(subject.zone_contact.id).to eq("2000578125")
      expect(subject.zone_contact.name).to eq("Markmonitor")
      expect(subject.zone_contact.organization).to eq(nil)
      expect(subject.zone_contact.address).to eq("Overland Road 10400, PMB155")
      expect(subject.zone_contact.city).to eq("Boise")
      expect(subject.zone_contact.zip).to eq("ID-83709")
      expect(subject.zone_contact.state).to eq(nil)
      expect(subject.zone_contact.country_code).to eq("US")
      expect(subject.zone_contact.phone).to eq("+ 1 208 389 5798")
      expect(subject.zone_contact.fax).to eq("+ 1 208 389 5771")
      expect(subject.zone_contact.email).to eq("ccops@markmonitor.com")
    end
  end
  describe "#registrar_contact" do
    it do
      expect(subject.registrar_contact).to be_a(Whois::Record::Contact)
      expect(subject.registrar_contact.type).to eq(nil)
      expect(subject.registrar_contact.id).to eq("1960108002")
      expect(subject.registrar_contact.name).to eq("3C Kft. %CLASS{registrar}")
      expect(subject.registrar_contact.organization).to eq("3C Ltd.")
      expect(subject.registrar_contact.address).to eq("Konkoly Thege út 29-33.")
      expect(subject.registrar_contact.city).to eq("Budapest")
      expect(subject.registrar_contact.zip).to eq("H-1121")
      expect(subject.registrar_contact.state).to eq(nil)
      expect(subject.registrar_contact.country_code).to eq("HU")
      expect(subject.registrar_contact.phone).to eq("+36 1 275 52 00")
      expect(subject.registrar_contact.fax).to eq("+36 1 275 58 87")
    end
  end
end
