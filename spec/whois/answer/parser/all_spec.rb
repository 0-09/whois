require 'spec_helper'

DIRNAME  = File.dirname(__FILE__)
DIRPARTS = DIRNAME.split("/")


TPL_DESCRIBE = <<-RUBY.chomp!
# This file is autogenerated. Do not edit it manually.
# To edit the test, please change
# %{sfile}

describe %{klass}, "%{descr}" do

  FILE = "%{ffile}"
  PART = Whois::Answer::Part.new(:body => File.read(FILE))

  _part       = Whois::Answer::Part
  _registrar  = Whois::Answer::Registrar
  _contact    = Whois::Answer::Contact
  _nameserver = Whois::Answer::Nameserver


  before(:each) do
    @parser = klass.new(PART)
  end

%{contexts}
end
RUBY

TPL_CONTEXT  = <<-RUBY.chomp!
  context "#%{descr}" do
%{examples}
  end
RUBY

TPL_EXAMPLE = <<-RUBY.chomp!
    it do
      @parser.%{subject}.%{should} %{match}
    end
RUBY

TPL_EXAMPLE_RAISE = <<-RUBY.chomp!
    it do
      lambda { @parser.%{subject} }.%{should} %{match}
    end
RUBY


Dir["#{DIRNAME}/**/**.expected"].each do |file|

  # Generate the filename and klass name from the test file.
  paths = (file.split("/") - DIRPARTS)
  klass = Whois::Answer::Parser.parser_klass(paths.first)
  ffile = file.gsub(".expected", ".txt")
  sfile = file.gsub(".expected", ".expected.rb")

  # Extract the tests from the test file
  # and generates a Hash.
  #
  #   {
  #     "domain" => [
  #       ["%s", "should", "== \"google.biz\""]
  #     ],
  #     "created_on" => [
  #       ["%s", "should", "be_a(Time)"],
  #       ["%s", "should", "== Time.parse(\"2002-03-27 00:01:00 GMT\")"]
  #     ]
  #   }
  #
  tests = {}
  match = nil
  lines = File.open(file)
  lines.each do |line|
    line.chomp!
    case line
      when ""
        # skip blank lines
      when /^#([^\s]+)/
        tests[match = $1] = []
      when /^\s+(.+?): (.+?) (.+)/
        tests[match] << [$2, $1, $3]
      else
        raise "Invalid Line `#{line}'"
    end
  end

  # Generate the RSpec content and
  #Â write one file for every test.
  contexts = tests.map do |attr, specs|
    examples = specs.map do |method, should, match|
      if match.index("raise_")
        TPL_EXAMPLE_RAISE % { :subject => method % attr, :should => should, :match => match }
      else
        TPL_EXAMPLE % { :subject => method % attr, :should => should, :match => match }
      end
    end.join("\n")
    TPL_CONTEXT % { :descr => attr, :examples => examples }
  end.join("\n")

  describe = <<-RUBY
#{TPL_DESCRIBE % {
  :klass => klass,
  :descr => paths.last,
  :ffile => ffile,
  :sfile => sfile.gsub(SPEC_ROOT, "/spec"),
  :contexts => contexts
}}
  RUBY

  File.open(sfile, "w+") { |f| f.write(describe) }

end

Dir["#{DIRNAME}/**/**.expected.rb"].each do |file|
  require file
end